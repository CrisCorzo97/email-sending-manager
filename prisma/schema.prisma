// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model campaign {
  id          String   @id @default(uuid())
  name        String
  description String?
  template_id  String
  send_at     DateTime
  status      campaign_status @default(DRAFT)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  job_queue   job_queue[]
  email_logs  email_log[]

  template    email_template @relation(fields: [template_id], references: [id])
}

enum campaign_status {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

model email_log {
  id        String   @id @default(uuid())
  email_id   String   @map("email_id")
  status    email_log_status
  created_at DateTime @default(now())
  campaign_id String   @map("campaign_id")

  email     email_template @relation(fields: [email_id], references: [id], onDelete: Cascade)
  campaign  campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
}

enum email_log_status {
  ENQUEUED
  SENT
  FAILED
}

model email_template {
  id          String   @id @default(uuid())
  subject     String
  body        String
  sender_email String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  logs        email_log[]
  job_queue   job_queue[]
  campaign    campaign[]
}

model job_queue {
  id        String   @id @default(uuid())
  job_id    String   @unique
  status    String   // Ej. 'completed', 'failed', 'waiting'
  email_id   String   @map("email_id")
  campaign_id String   @map("campaign_id")
  created_at DateTime @default(now())

  email     email_template @relation(fields: [email_id], references: [id], onDelete: Cascade)
  campaign  campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
}

enum job_queue_status {
  WAITING
  COMPLETED
  FAILED
}
